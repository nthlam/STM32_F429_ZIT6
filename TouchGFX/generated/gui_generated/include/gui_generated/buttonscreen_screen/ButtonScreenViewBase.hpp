/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef BUTTONSCREENVIEWBASE_HPP
#define BUTTONSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/buttonscreen_screen/ButtonScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class ButtonScreenViewBase : public touchgfx::View<ButtonScreenPresenter>
{
public:
    ButtonScreenViewBase();
    virtual ~ButtonScreenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void retryButtonClicked()
    {
        // Override and implement this function in ButtonScreen
    }
    virtual void readyButtonClicked()
    {
        // Override and implement this function in ButtonScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image playButtImg;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  retryButt1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  pauseButt1;
    touchgfx::TextAreaWithOneWildcard highscorebutt;
    touchgfx::TextAreaWithOneWildcard scorebutt;
    touchgfx::Image image1;
    touchgfx::ModalWindow modalWindow1;
    touchgfx::TextArea headerText;
    touchgfx::TextArea ready;
    touchgfx::TextArea strike;
    touchgfx::TextArea set;
    touchgfx::ButtonWithLabel readyButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HIGHSCOREBUTT_SIZE = 25;
    touchgfx::Unicode::UnicodeChar highscorebuttBuffer[HIGHSCOREBUTT_SIZE];
    static const uint16_t SCOREBUTT_SIZE = 25;
    touchgfx::Unicode::UnicodeChar scorebuttBuffer[SCOREBUTT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ButtonScreenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<ButtonScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // BUTTONSCREENVIEWBASE_HPP
